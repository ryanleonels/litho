/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.litho

import com.facebook.litho.testing.testrunner.LithoTestRunner
import com.facebook.rendercore.transitions.TransitionUtils
import java.lang.IllegalArgumentException
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(LithoTestRunner::class)
class TransitionUtilsTest {

  private val globalKey = "global-key"
  private val transitionKey = "transition-key"
  private val transitionOwnerKey = "transition-owner-key"

  @Test
  fun noTransitionKeyTest() {
    val id =
        TransitionUtils.createTransitionId(
            null, Transition.DEFAULT_TRANSITION_KEY_TYPE, transitionOwnerKey, globalKey)
    assertThat(id).isNotNull
    assertThat(id?.mType).isEqualTo(TransitionId.Type.AUTOGENERATED)
  }

  @Test
  fun defaultTransitionKeyTest() {
    val id =
        TransitionUtils.createTransitionId(
            transitionKey, Transition.DEFAULT_TRANSITION_KEY_TYPE, transitionOwnerKey, globalKey)
    assertThat(id).isNotNull
    assertThat(id?.mType).isEqualTo(TransitionId.Type.SCOPED)
    assertThat(id?.mReference).isEqualTo(transitionKey)
    assertThat(id?.mExtraData).isEqualTo(transitionOwnerKey)
  }

  @Test
  fun globalTransitionKeyTest() {
    val id =
        TransitionUtils.createTransitionId(
            transitionKey, Transition.TransitionKeyType.GLOBAL, transitionOwnerKey, globalKey)
    assertThat(id).isNotNull
    assertThat(id?.mType).isEqualTo(TransitionId.Type.GLOBAL)
    assertThat(id?.mReference).isEqualTo(transitionKey)
  }

  @Test
  fun localTransitionKeyTest() {
    val id =
        TransitionUtils.createTransitionId(
            transitionKey, Transition.TransitionKeyType.LOCAL, transitionOwnerKey, globalKey)
    assertThat(id).isNotNull
    assertThat(id?.mType).isEqualTo(TransitionId.Type.SCOPED)
    assertThat(id?.mReference).isEqualTo(transitionKey)
    assertThat(id?.mExtraData).isEqualTo(transitionOwnerKey)
  }

  @Test(expected = IllegalArgumentException::class)
  fun unhandledTransitionKeyTypeTest() {
    TransitionUtils.createTransitionId(transitionKey, null, transitionOwnerKey, globalKey)
  }
}
